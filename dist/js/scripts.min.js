"use strict";function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}Object.defineProperty(exports,"__esModule",{value:!0}),exports._getCache=exports._getSetter=exports._missingPlugin=exports._round=exports._roundModifier=exports._config=exports._ticker=exports._plugins=exports._checkPlugin=exports._replaceRandom=exports._colorStringFilter=exports._sortPropTweensByPriority=exports._forEachName=exports._removeLinkedListItem=exports._setDefaults=exports._relExp=exports._renderComplexString=exports._isUndefined=exports._isString=exports._numWithUnitExp=exports._numExp=exports._getProperty=exports.shuffle=exports.interpolate=exports.unitize=exports.pipe=exports.mapRange=exports.toArray=exports.splitColor=exports.clamp=exports.getUnit=exports.normalize=exports.snap=exports.random=exports.distribute=exports.wrapYoyo=exports.wrap=exports.Circ=exports.Expo=exports.Sine=exports.Bounce=exports.SteppedEase=exports.Back=exports.Elastic=exports.Strong=exports.Quint=exports.Quart=exports.Cubic=exports.Quad=exports.Linear=exports.Power4=exports.Power3=exports.Power2=exports.Power1=exports.Power0=exports.default=exports.gsap=exports.PropTween=exports.TweenLite=exports.TweenMax=exports.Tween=exports.TimelineLite=exports.TimelineMax=exports.Timeline=exports.Animation=exports.GSCache=void 0;var _suppressOverwrites,_globalTimeline,_win,_coreInitted,_doc,_coreReady,_lastRenderedFrame,_quickTween,_tickerActive,_config={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},_defaults={duration:.5,overwrite:!1,delay:0},_bigNum=1e8,_tinyNum=1/_bigNum,_2PI=2*Math.PI,_HALF_PI=_2PI/4,_gsID=0,_sqrt=Math.sqrt,_cos=Math.cos,_sin=Math.sin,_isString=function(t){return"string"==typeof t},_isFunction=function(t){return"function"==typeof t},_isNumber=function(t){return"number"==typeof t},_isUndefined=function(t){return void 0===t},_isObject=function(t){return"object"==typeof t},_isNotFalse=function(t){return!1!==t},_windowExists=function(){return"undefined"!=typeof window},_isFuncOrString=function(t){return _isFunction(t)||_isString(t)},_isTypedArray="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},_isArray=Array.isArray,_strictNumExp=/(?:-?\.?\d|\.)+/gi,_numExp=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,_numWithUnitExp=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,_complexStringNumExp=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,_relExp=/[+-]=-?[.\d]+/,_delimitedValueExp=/[#\-+.]*\b[a-z\d-=+%.]+/gi,_unitExp=/[\d.+\-=]+(?:e[-+]\d*)*/i,_globals={},_installScope={},_install=function(t){return(_installScope=_merge(t,_globals))&&gsap},_missingPlugin=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},_warn=function(t,e){return!e&&console.warn(t)},_addGlobal=function(t,e){return t&&(_globals[t]=e)&&_installScope&&(_installScope[t]=e)||_globals},_emptyFunc=function(){return 0},_reservedProps={},_lazyTweens=[],_lazyLookup={},_plugins={},_effects={},_nextGCFrame=30,_harnessPlugins=[],_callbackNames="",_harness=function(t){var e,r,i=t[0];if(_isObject(i)||_isFunction(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(r=_harnessPlugins.length;r--&&!_harnessPlugins[r].targetTest(i););e=_harnessPlugins[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new GSCache(t[r],e)))||t.splice(r,1);return t},_getCache=function(t){return t._gsap||_harness(toArray(t))[0]._gsap},_getProperty=function(t,e,r){return(r=t[e])&&_isFunction(r)?t[e]():_isUndefined(r)&&t.getAttribute&&t.getAttribute(e)||r},_forEachName=function(t,e){return(t=t.split(",")).forEach(e)||t},_round=function(t){return Math.round(1e5*t)/1e5||0},_arrayContainsAny=function(t,e){for(var r=e.length,i=0;t.indexOf(e[i])<0&&++i<r;);return i<r},_parseVars=function(t,e,r){var i,n=_isNumber(t[1]),s=(n?2:1)+(e<2?0:1),a=t[s];if(n&&(a.duration=t[1]),a.parent=r,e){for(i=a;r&&!("immediateRender"in i);)i=r.vars.defaults||{},r=_isNotFalse(r.vars.inherit)&&r.parent;a.immediateRender=_isNotFalse(i.immediateRender),e<2?a.runBackwards=1:a.startAt=t[s-1]}return a},_lazyRender=function(){var t,e,r=_lazyTweens.length,i=_lazyTweens.slice(0);for(_lazyLookup={},t=_lazyTweens.length=0;t<r;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},_lazySafeRender=function(t,e,r,i){_lazyTweens.length&&_lazyRender(),t.render(e,r,i),_lazyTweens.length&&_lazyRender()},_numericIfPossible=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(_delimitedValueExp).length<2?e:_isString(t)?t.trim():t},_passThrough=function(t){return t},_setDefaults=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},_setKeyframeDefaults=function(t,e){for(var r in e)r in t||"duration"===r||"ease"===r||(t[r]=e[r])},_merge=function(t,e){for(var r in e)t[r]=e[r];return t},_mergeDeep=function t(e,r){for(var i in r)"__proto__"!==i&&"constructor"!==i&&"prototype"!==i&&(e[i]=_isObject(r[i])?t(e[i]||(e[i]={}),r[i]):r[i]);return e},_copyExcluding=function(t,e){var r,i={};for(r in t)r in e||(i[r]=t[r]);return i},_inheritDefaults=function(t){var e=t.parent||_globalTimeline,r=t.keyframes?_setKeyframeDefaults:_setDefaults;if(_isNotFalse(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t},_arraysMatch=function(t,e){for(var r=t.length,i=r===e.length;i&&r--&&t[r]===e[r];);return r<0},_addLinkedListItem=function(t,e,r,i,n){void 0===r&&(r="_first");var s,a=t[i=void 0===i?"_last":i];if(n)for(s=e[n];a&&a[n]>s;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[i]=e,e._prev=a,e.parent=e._dp=t,e},_removeLinkedListItem=function(t,e,r,i){void 0===r&&(r="_first"),void 0===i&&(i="_last");var n=e._prev,s=e._next;n?n._next=s:t[r]===e&&(t[r]=s),s?s._prev=n:t[i]===e&&(t[i]=n),e._next=e._prev=e.parent=null},_removeFromParent=function(t,e){!t.parent||e&&!t.parent.autoRemoveChildren||t.parent.remove(t),t._act=0},_uncache=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},_recacheAncestors=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},_hasNoPausedAncestors=function t(e){return!e||e._ts&&t(e.parent)},_elapsedCycleDuration=function(t){return t._repeat?_animationCycle(t._tTime,t=t.duration()+t._rDelay)*t:0},_animationCycle=function(t,e){e=Math.floor(t/=e);return t&&e===t?e-1:e},_parentToChildTotalTime=function(t,e){return(t-e._start)*e._ts+(0<=e._ts?0:e._dirty?e.totalDuration():e._tDur)},_setEnd=function(t){return t._end=_round(t._start+(t._tDur/Math.abs(t._ts||t._rts||_tinyNum)||0))},_alignPlayhead=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=_round(r._time-(0<t._ts?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),_setEnd(t),r._dirty||_uncache(r,t)),t},_postAddChecks=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=_parentToChildTotalTime(t.rawTime(),e),(!e._dur||_clamp(0,e.totalDuration(),r)-e._tTime>_tinyNum)&&e.render(r,!0)),_uncache(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)0<=r.rawTime()&&r.totalTime(r._tTime),r=r._dp;t._zTime=-_tinyNum}},_addToTimeline=function(t,e,r,i){return e.parent&&_removeFromParent(e),e._start=_round(r+e._delay),e._end=_round(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),_addLinkedListItem(t,e,"_first","_last",t._sort?"_start":0),t._recent=e,i||_postAddChecks(t,e),t},_scrollTrigger=function(t,e){return(_globals.ScrollTrigger||_missingPlugin("scrollTrigger",e))&&_globals.ScrollTrigger.create(e,t)},_attemptInitTween=function(t,e,r,i){return _initTween(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&_lastRenderedFrame!==_ticker.frame?(_lazyTweens.push(t),t._lazy=[e,i],1):void 0:1},_parentPlayheadIsBeforeStart=function t(e){e=e.parent;return e&&e._ts&&e._initted&&!e._lock&&(e.rawTime()<0||t(e))},_renderZeroDurationTween=function(t,e,r,i){var n,s,a,o=t.ratio,_=e<0||!e&&(!t._start&&_parentPlayheadIsBeforeStart(t)||(t._ts<0||t._dp._ts<0)&&"isFromStart"!==t.data&&"isStart"!==t.data)?0:1,u=t._rDelay,l=0;if(u&&t._repeat&&(l=_clamp(0,t._tDur,e),s=_animationCycle(l,u),a=_animationCycle(t._tTime,u),t._yoyo&&1&s&&(_=1-_),s!==a&&(o=1-_,t.vars.repeatRefresh&&t._initted&&t.invalidate())),_!==o||i||t._zTime===_tinyNum||!e&&t._zTime){if(t._initted||!_attemptInitTween(t,e,i,r)){for(a=t._zTime,t._zTime=e||(r?_tinyNum:0),r=r||e&&!a,t.ratio=_,t._from&&(_=1-_),t._time=0,t._tTime=l,r||_callback(t,"onStart"),n=t._pt;n;)n.r(_,n.d),n=n._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&_callback(t,"onUpdate"),l&&t._repeat&&!r&&t.parent&&_callback(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===_&&(_&&_removeFromParent(t,1),r||(_callback(t,_?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}}else t._zTime||(t._zTime=e)},_findNextPauseTween=function(t,e,r){var i;if(e<r)for(i=t._first;i&&i._start<=r;){if(!i._dur&&"isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=r;){if(!i._dur&&"isPause"===i.data&&i._start<e)return i;i=i._prev}},_setDuration=function(t,e,r,i){var n=t._repeat,s=_round(e)||0,e=t._tTime/t._tDur;return e&&!i&&(t._time*=s/t._dur),t._dur=s,t._tDur=n?n<0?1e10:_round(s*(n+1)+t._rDelay*n):s,e&&!i?_alignPlayhead(t,t._tTime=t._tDur*e):t.parent&&_setEnd(t),r||_uncache(t.parent,t),t},_onUpdateTotalDuration=function(t){return t instanceof Timeline?_uncache(t):_setDuration(t,t._dur)},_zeroPosition={_start:0,endTime:_emptyFunc},_parsePosition=function t(e,r){var i,n=e.labels,s=e._recent||_zeroPosition,a=e.duration()>=_bigNum?s.endTime(!1):e._dur;return _isString(r)&&(isNaN(r)||r in n)?"<"===(i=r.charAt(0))||">"===i?("<"===i?s._start:s.endTime(0<=s._repeat))+(parseFloat(r.substr(1))||0):(i=r.indexOf("="))<0?(r in n||(n[r]=a),n[r]):(n=+(r.charAt(i-1)+r.substr(i+1)),1<i?t(e,r.substr(0,i-1))+n:a+n):null==r?a:+r},_conditionalReturn=function(t,e){return t||0===t?e(t):e},_clamp=function(t,e,r){return r<t?t:e<r?e:r},getUnit=function(t){if("string"!=typeof t)return"";var e=_unitExp.exec(t);return e?t.substr(e.index+e[0].length):""},clamp=function(e,r,t){return _conditionalReturn(t,function(t){return _clamp(e,r,t)})},_slice=[].slice,_isArrayLike=function(t,e){return t&&_isObject(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&_isObject(t[0]))&&!t.nodeType&&t!==_win},_flatten=function(t,e,r){return void 0===r&&(r=[]),t.forEach(function(t){return _isString(t)&&!e||_isArrayLike(t,1)?r.push.apply(r,toArray(t)):r.push(t)})||r},toArray=function(t,e){return!_isString(t)||e||!_coreInitted&&_wake()?_isArray(t)?_flatten(t,e):_isArrayLike(t)?_slice.call(t,0):t?[t]:[]:_slice.call(_doc.querySelectorAll(t),0)},shuffle=function(t){return t.sort(function(){return.5-Math.random()})},distribute=function(t){if(_isFunction(t))return t;var c=_isObject(t)?t:{each:t},d=_parseEase(c.ease),f=c.from||0,m=parseFloat(c.base)||0,g={},t=0<f&&f<1,T=isNaN(f)||t,y=c.axis,v=f,x=f;return _isString(f)?v=x={center:.5,edges:.5,end:1}[f]||0:!t&&T&&(v=f[0],x=f[1]),function(t,e,r){var i,n,s,a,o,_,u,l,p=(r||c).length,h=g[p];if(!h){if(!(l="auto"===c.grid?0:(c.grid||[1,_bigNum])[1])){for(_=-_bigNum;_<(_=r[l++].getBoundingClientRect().left)&&l<p;);l--}for(h=g[p]=[],i=T?Math.min(l,p)*v-.5:f%l,n=T?p*x/l-.5:f/l|0,u=_bigNum,o=_=0;o<p;o++)s=o%l-i,a=n-(o/l|0),h[o]=a=y?Math.abs("y"===y?a:s):_sqrt(s*s+a*a),_<a&&(_=a),a<u&&(u=a);"random"===f&&shuffle(h),h.max=_-u,h.min=u,h.v=p=(parseFloat(c.amount)||parseFloat(c.each)*(p<l?p-1:y?"y"===y?p/l:l:Math.max(l,p/l))||0)*("edges"===f?-1:1),h.b=p<0?m-p:m,h.u=getUnit(c.amount||c.each)||0,d=d&&p<0?_invertEase(d):d}return p=(h[t]-h.min)/h.max||0,_round(h.b+(d?d(p):p)*h.v)+h.u}},_roundModifier=function(r){var i=r<1?Math.pow(10,(r+"").length-2):1;return function(t){var e=Math.round(parseFloat(t)/r)*r*i;return(e-e%1)/i+(_isNumber(t)?0:getUnit(t))}},snap=function(_,t){var u,l,e=_isArray(_);return!e&&_isObject(_)&&(u=e=_.radius||_bigNum,_.values?(_=toArray(_.values),(l=!_isNumber(_[0]))&&(u*=u)):_=_roundModifier(_.increment)),_conditionalReturn(t,e?_isFunction(_)?function(t){return l=_(t),Math.abs(l-t)<=u?l:t}:function(t){for(var e,r,i=parseFloat(l?t.x:t),n=parseFloat(l?t.y:0),s=_bigNum,a=0,o=_.length;o--;)(e=l?(e=_[o].x-i)*e+(r=_[o].y-n)*r:Math.abs(_[o]-i))<s&&(s=e,a=o);return a=!u||s<=u?_[a]:t,l||a===t||_isNumber(t)?a:a+getUnit(t)}:_roundModifier(_))},random=function(t,e,r,i){return _conditionalReturn(_isArray(t)?!e:!0===r?!!(r=0):!i,function(){return _isArray(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(i=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*i)/i})},pipe=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce(function(t,e){return e(t)},t)}},unitize=function(e,r){return function(t){return e(parseFloat(t))+(r||getUnit(t))}},normalize=function(t,e,r){return mapRange(t,e,0,1,r)},_wrapArray=function(e,r,t){return _conditionalReturn(t,function(t){return e[~~r(t)]})},wrap=function t(e,r,i){var n=r-e;return _isArray(e)?_wrapArray(e,t(0,e.length),r):_conditionalReturn(i,function(t){return(n+(t-e)%n)%n+e})},wrapYoyo=function t(e,r,i){var n=r-e,s=2*n;return _isArray(e)?_wrapArray(e,t(0,e.length-1),r):_conditionalReturn(i,function(t){return e+(n<(t=(s+(t-e)%s)%s||0)?s-t:t)})},_replaceRandom=function(t){for(var e,r,i,n,s=0,a="";~(e=t.indexOf("random(",s));)i=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,i-e-7).match(n?_delimitedValueExp:_strictNumExp),a+=t.substr(s,e-s)+random(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),s=i+1;return a+t.substr(s,t.length-s)},mapRange=function(e,t,r,i,n){var s=t-e,a=i-r;return _conditionalReturn(n,function(t){return r+((t-e)/s*a||0)})},interpolate=function t(e,r,i,n){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var a,o,_,u,l,p=_isString(e),h={};if(!0===i&&(n=1)&&(i=null),p)e={p:e},r={p:r};else if(_isArray(e)&&!_isArray(r)){for(_=[],u=e.length,l=u-2,o=1;o<u;o++)_.push(t(e[o-1],e[o]));u--,s=function(t){t*=u;var e=Math.min(l,~~t);return _[e](t-e)},i=r}else n||(e=_merge(_isArray(e)?[]:{},e));if(!_){for(a in r)_addPropTween.call(h,e,a,"get",r[a]);s=function(t){return _renderPropTweens(t,h)||(p?e.p:e)}}}return _conditionalReturn(i,s)},_getLabelInDirection=function(t,e,r){var i,n,s,a=t.labels,o=_bigNum;for(i in a)(n=a[i]-e)<0==!!r&&n&&o>(n=Math.abs(n))&&(s=i,o=n);return s},_callback=function(t,e,r){var i=t.vars,n=i[e];if(n)return e=i[e+"Params"],t=i.callbackScope||t,r&&_lazyTweens.length&&_lazyRender(),e?n.apply(t,e):n.call(t)},_interrupt=function(t){return _removeFromParent(t),t.progress()<1&&_callback(t,"onInterrupt"),t},_createPlugin=function(t){var e=(t=!t.name&&t.default||t).name,r=_isFunction(t),i=e&&!r&&t.init?function(){this._props=[]}:t,n={init:_emptyFunc,render:_renderPropTweens,add:_addPropTween,kill:_killPropTweensOf,modifier:_addPluginModifier,rawVars:0},r={targetTest:0,get:0,getSetter:_getSetter,aliases:{},register:0};if(_wake(),t!==i){if(_plugins[e])return;_setDefaults(i,_setDefaults(_copyExcluding(t,n),r)),_merge(i.prototype,_merge(n,_copyExcluding(t,r))),_plugins[i.prop=e]=i,t.targetTest&&(_harnessPlugins.push(i),_reservedProps[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}_addGlobal(e,i),t.register&&t.register(gsap,i,PropTween)},_255=255,_colorLookup={aqua:[0,_255,_255],lime:[0,_255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,_255],navy:[0,0,128],white:[_255,_255,_255],olive:[128,128,0],yellow:[_255,_255,0],orange:[_255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[_255,0,0],pink:[_255,192,203],cyan:[0,_255,_255],transparent:[_255,_255,_255,0]},_hue=function(t,e,r){return(6*(t=t<0?t+1:1<t?t-1:t)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*_255+.5|0},splitColor=function(t,e,r){var i,n,s,a,o,_,u,l=t?_isNumber(t)?[t>>16,t>>8&_255,t&_255]:0:_colorLookup.black;if(!l){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),_colorLookup[t])l=_colorLookup[t];else if("#"===t.charAt(0)){if(9===(t=t.length<6?"#"+(i=t.charAt(1))+i+(n=t.charAt(2))+n+(s=t.charAt(3))+s+(5===t.length?t.charAt(4)+t.charAt(4):""):t).length)return[(l=parseInt(t.substr(1,6),16))>>16,l>>8&_255,l&_255,parseInt(t.substr(7),16)/255];l=[(t=parseInt(t.substr(1),16))>>16,t>>8&_255,t&_255]}else if("hsl"===t.substr(0,3))if(l=u=t.match(_strictNumExp),e){if(~t.indexOf("="))return l=t.match(_numExp),r&&l.length<4&&(l[3]=1),l}else a=+l[0]%360/360,o=+l[1]/100,i=2*(_=+l[2]/100)-(n=_<=.5?_*(o+1):_+o-_*o),3<l.length&&(l[3]*=1),l[0]=_hue(a+1/3,i,n),l[1]=_hue(a,i,n),l[2]=_hue(a-1/3,i,n);else l=t.match(_strictNumExp)||_colorLookup.transparent;l=l.map(Number)}return e&&!u&&(i=l[0]/_255,n=l[1]/_255,s=l[2]/_255,_=((t=Math.max(i,n,s))+(e=Math.min(i,n,s)))/2,t===e?a=o=0:(u=t-e,o=.5<_?u/(2-t-e):u/(t+e),a=t===i?(n-s)/u+(n<s?6:0):t===n?(s-i)/u+2:(i-n)/u+4,a*=60),l[0]=~~(a+.5),l[1]=~~(100*o+.5),l[2]=~~(100*_+.5)),r&&l.length<4&&(l[3]=1),l},_colorOrderData=function(t){var e=[],r=[],i=-1;return t.split(_colorExp).forEach(function(t){t=t.match(_numWithUnitExp)||[];e.push.apply(e,t),r.push(i+=t.length+1)}),e.c=r,e},_formatColors=function(t,e,r){var i,n,s,a,o="",_=(t+o).match(_colorExp),u=e?"hsla(":"rgba(",l=0;if(!_)return t;if(_=_.map(function(t){return(t=splitColor(t,e,1))&&u+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"}),r&&(s=_colorOrderData(t),(i=r.c).join(o)!==s.c.join(o)))for(a=(n=t.replace(_colorExp,"1").split(_numWithUnitExp)).length-1;l<a;l++)o+=n[l]+(~i.indexOf(l)?_.shift()||u+"0,0,0,0)":(s.length?s:_.length?_:r).shift());if(!n)for(a=(n=t.split(_colorExp)).length-1;l<a;l++)o+=n[l]+_[l];return o+n[a]},_colorExp=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in _colorLookup)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),_hslExp=/hsl[a]?\(/,_colorStringFilter=function(t){var e=t.join(" ");if(_colorExp.lastIndex=0,_colorExp.test(e))return e=_hslExp.test(e),t[1]=_formatColors(t[1],e),t[0]=_formatColors(t[0],e,_colorOrderData(t[1])),!0},_ticker=function(){function a(t){var e,r,i,n=p()-f,s=!0===t;if(h<n&&(d+=n-c),(0<(n=(r=(f+=n)-d)-g)||s)&&(i=++y.frame,u=r-1e3*y.time,y.time=r/=1e3,g+=n+(m<=n?4:m-n),e=1),s||(o=_(a)),e)for(l=0;l<T.length;l++)T[l](r,u,i,t)}var o,_,t,u,l,p=Date.now,h=500,c=33,d=p(),f=d,m=1e3/240,g=m,T=[],y={time:0,frame:0,tick:function(){a(!0)},deltaRatio:function(t){return u/(1e3/(t||60))},wake:function(){_coreReady&&(!_coreInitted&&_windowExists()&&(_win=_coreInitted=window,_doc=_win.document||{},_globals.gsap=gsap,(_win.gsapVersions||(_win.gsapVersions=[])).push(gsap.version),_install(_installScope||_win.GreenSockGlobals||!_win.gsap&&_win||{}),t=_win.requestAnimationFrame),o&&y.sleep(),_=t||function(t){return setTimeout(t,g-1e3*y.time+1|0)},_tickerActive=1,a(2))},sleep:function(){(t?_win.cancelAnimationFrame:clearTimeout)(o),_tickerActive=0,_=_emptyFunc},lagSmoothing:function(t,e){h=t||1/_tinyNum,c=Math.min(e,h,0)},fps:function(t){m=1e3/(t||240),g=1e3*y.time+m},add:function(t){T.indexOf(t)<0&&T.push(t),_wake()},remove:function(t){~(t=T.indexOf(t))&&T.splice(t,1)&&t<=l&&l--},_listeners:T};return y}(),_wake=function(){return!_tickerActive&&_ticker.wake()},_easeMap={},_customEaseExp=/^[\d.\-M][\d.\-,\s]/,_quotesExp=/["']/g,_parseObjectInString=function(t){for(var e,r,i,n={},s=t.substr(1,t.length-3).split(":"),a=s[0],o=1,_=s.length;o<_;o++)r=s[o],e=o!==_-1?r.lastIndexOf(","):r.length,i=r.substr(0,e),n[a]=isNaN(i)?i.replace(_quotesExp,"").trim():+i,a=r.substr(e+1).trim();return n},_valueInParentheses=function(t){var e=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",e);return t.substring(e,~i&&i<r?t.indexOf(")",r+1):r)},_configEaseFromString=function(t){var e=(t+"").split("("),r=_easeMap[e[0]];return r&&1<e.length&&r.config?r.config.apply(null,~t.indexOf("{")?[_parseObjectInString(e[1])]:_valueInParentheses(t).split(",").map(_numericIfPossible)):_easeMap._CE&&_customEaseExp.test(t)?_easeMap._CE("",t):r},_invertEase=function(e){return function(t){return 1-e(1-t)}},_propagateYoyoEase=function t(e,r){for(var i,n=e._first;n;)n instanceof Timeline?t(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?t(n.timeline,r):(i=n._ease,n._ease=n._yEase,n._yEase=i,n._yoyo=r)),n=n._next},_parseEase=function(t,e){return t&&(_isFunction(t)?t:_easeMap[t]||_configEaseFromString(t))||e},_insertEase=function(t,e,r,i){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===i&&(i=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,s={easeIn:e,easeOut:r,easeInOut:i};return _forEachName(t,function(t){for(var e in _easeMap[t]=_globals[t]=s,_easeMap[n=t.toLowerCase()]=r,s)_easeMap[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=_easeMap[t+"."+e]=s[e]}),s},_easeInOutFromOut=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},_configElastic=function r(i,t,e){function n(t){return 1===t?1:s*Math.pow(2,-10*t)*_sin((t-a)*o)+1}var s=1<=t?t:1,a=(o=(e||(i?.3:.45))/(t<1?t:1))/_2PI*(Math.asin(1/s)||0),t="out"===i?n:"in"===i?function(t){return 1-n(1-t)}:_easeInOutFromOut(n),o=_2PI/o;return t.config=function(t,e){return r(i,t,e)},t},_configBack=function e(r,i){void 0===i&&(i=1.70158);function n(t){return t?--t*t*((i+1)*t+i)+1:0}var t="out"===r?n:"in"===r?function(t){return 1-n(1-t)}:_easeInOutFromOut(n);return t.config=function(t){return e(r,t)},t};exports._ticker=_ticker,exports._colorStringFilter=_colorStringFilter,exports.splitColor=splitColor,exports.interpolate=interpolate,exports.mapRange=mapRange,exports._replaceRandom=_replaceRandom,exports.wrapYoyo=wrapYoyo,exports.wrap=wrap,exports.normalize=normalize,exports.unitize=unitize,exports.pipe=pipe,exports.random=random,exports.snap=snap,exports._roundModifier=_roundModifier,exports.distribute=distribute,exports.shuffle=shuffle,exports.toArray=toArray,exports.clamp=clamp,exports.getUnit=getUnit,exports._removeLinkedListItem=_removeLinkedListItem,exports._setDefaults=_setDefaults,exports._round=_round,exports._forEachName=_forEachName,exports._getProperty=_getProperty,exports._getCache=_getCache,exports._plugins=_plugins,exports._missingPlugin=_missingPlugin,exports._relExp=_relExp,exports._numWithUnitExp=_numWithUnitExp,exports._numExp=_numExp,exports._isUndefined=_isUndefined,exports._isString=_isString,exports._config=_config,_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong",function(t,e){var r=e<5?e+1:e;_insertEase(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},function(t){return 1-Math.pow(1-t,r)},function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2})}),_easeMap.Linear.easeNone=_easeMap.none=_easeMap.Linear.easeIn,_insertEase("Elastic",_configElastic("in"),_configElastic("out"),_configElastic()),function(e){function r(t){return t<i?e*t*t:t<.7272727272727273?e*Math.pow(t-1.5/2.75,2)+.75:t<.9090909090909092?e*(t-=2.25/2.75)*t+.9375:e*Math.pow(t-2.625/2.75,2)+.984375}var i=1/2.75;_insertEase("Bounce",function(t){return 1-r(1-t)},r)}(7.5625),_insertEase("Expo",function(t){return t?Math.pow(2,10*(t-1)):0}),_insertEase("Circ",function(t){return-(_sqrt(1-t*t)-1)}),_insertEase("Sine",function(t){return 1===t?1:1-_cos(t*_HALF_PI)}),_insertEase("Back",_configBack("in"),_configBack("out"),_configBack()),_easeMap.SteppedEase=_easeMap.steps=_globals.SteppedEase={config:function(t,e){var r=1/(t=void 0===t?1:t),i=t+(e?0:1),n=e?1:0,s=1-_tinyNum;return function(t){return((i*_clamp(0,s,t)|0)+n)*r}}},_defaults.ease=_easeMap["quad.out"],_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(t){return _callbackNames+=t+","+t+"Params,"});var GSCache=function(t,e){this.id=_gsID++,(t._gsap=this).target=t,this.harness=e,this.get=e?e.get:_getProperty,this.set=e?e.getSetter:_getSetter};exports.GSCache=GSCache;var Animation=function(){function t(t,e){var r=t.parent||_globalTimeline;this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,_setDuration(this,+t.duration,1,1),this.data=t.data,_tickerActive||_ticker.wake(),r&&_addToTimeline(r,this,e||0===e?e:r._time,1),t.reversed&&this.reverse(),t.paused&&this.paused(!0)}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(0<this._repeat?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,_setDuration(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(_wake(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(_alignPlayhead(this,t),!r._dp||r.parent||_postAddChecks(r,this);r.parent;)r.parent._time!==r._start+(0<=r._ts?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(0<this._ts&&t<this._tDur||this._ts<0&&0<t||!this._tDur&&!t)&&_addToTimeline(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===_tinyNum||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),_lazySafeRender(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+_elapsedCycleDuration(this))%this._dur||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+_elapsedCycleDuration(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?_animationCycle(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return this._rts===-_tinyNum?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?_parentToChildTotalTime(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||t===-_tinyNum?0:this._rts,_recacheAncestors(this.totalTime(_clamp(-this._delay,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&((this._ps=t)?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(_wake(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&(this._tTime-=_tinyNum)&&Math.abs(this._zTime)!==_tinyNum))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return!e||!e._sort&&this.parent||_addToTimeline(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(_isNotFalse(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?_parentToChildTotalTime(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,_onUpdateTotalDuration(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){return arguments.length?(this._rDelay=t,_onUpdateTotalDuration(this)):this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(_parsePosition(this,t),_isNotFalse(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,_isNotFalse(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-_tinyNum:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-_tinyNum,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-_tinyNum))},e.eventCallback=function(t,e,r){var i=this.vars;return 1<arguments.length?(e?(i[t]=e,r&&(i[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},e.then=function(i){var n=this;return new Promise(function(e){function t(){var t=n.then;n.then=null,_isFunction(r)&&(r=r(n))&&(r.then||r===n)&&(n.then=t),e(r),n.then=t}var r=_isFunction(i)?i:_passThrough;n._initted&&1===n.totalProgress()&&0<=n._ts||!n._tTime&&n._ts<0?t():n._prom=t})},e.kill=function(){_interrupt(this)},t}();exports.Animation=Animation,_setDefaults(Animation.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-_tinyNum,_prom:0,_ps:!1,_rts:1});var Timeline=function(r){function t(t,e){return void 0===t&&(t={}),(e=r.call(this,t,e)||this).labels={},e.smoothChildTiming=!!t.smoothChildTiming,e.autoRemoveChildren=!!t.autoRemoveChildren,e._sort=_isNotFalse(t.sortChildren),e.parent&&_postAddChecks(e.parent,_assertThisInitialized(e)),t.scrollTrigger&&_scrollTrigger(_assertThisInitialized(e),t.scrollTrigger),e}_inheritsLoose(t,r);var e=t.prototype;return e.to=function(t,e,r){return new Tween(t,_parseVars(arguments,0,this),_parsePosition(this,_isNumber(e)?arguments[3]:r)),this},e.from=function(t,e,r){return new Tween(t,_parseVars(arguments,1,this),_parsePosition(this,_isNumber(e)?arguments[3]:r)),this},e.fromTo=function(t,e,r,i){return new Tween(t,_parseVars(arguments,2,this),_parsePosition(this,_isNumber(e)?arguments[4]:i)),this},e.set=function(t,e,r){return e.duration=0,e.parent=this,_inheritDefaults(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Tween(t,e,_parsePosition(this,r),1),this},e.call=function(t,e,r){return _addToTimeline(this,Tween.delayedCall(0,t,e),_parsePosition(this,r))},e.staggerTo=function(t,e,r,i,n,s,a){return r.duration=e,r.stagger=r.stagger||i,r.onComplete=s,r.onCompleteParams=a,r.parent=this,new Tween(t,r,_parsePosition(this,n)),this},e.staggerFrom=function(t,e,r,i,n,s,a){return r.runBackwards=1,_inheritDefaults(r).immediateRender=_isNotFalse(r.immediateRender),this.staggerTo(t,e,r,i,n,s,a)},e.staggerFromTo=function(t,e,r,i,n,s,a,o){return i.startAt=r,_inheritDefaults(i).immediateRender=_isNotFalse(i.immediateRender),this.staggerTo(t,e,i,n,s,a,o)},e.render=function(t,e,r){var i,n,s,a,o,_,u,l,p,h,c,d=this._time,f=this._dirty?this.totalDuration():this._tDur,m=this._dur,g=this!==_globalTimeline&&f-_tinyNum<t&&0<=t?f:t<_tinyNum?0:t,T=this._zTime<0!=t<0&&(this._initted||!m);if(g!==this._tTime||r||T){if(d!==this._time&&m&&(g+=this._time-d,t+=this._time-d),i=g,p=this._start,_=!(l=this._ts),T&&(m||(d=this._zTime),!t&&e||(this._zTime=t)),this._repeat){if(y=this._yoyo,o=m+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,r);if(i=_round(g%o),g===f?(a=this._repeat,i=m):((a=~~(g/o))&&a===g/o&&(i=m,a--),m<i&&(i=m)),h=_animationCycle(this._tTime,o),y&&1&a&&(i=m-i,c=1),a!==(h=!d&&this._tTime&&h!==a?a:h)&&!this._lock){var T=y&&1&h,y=T===(y&&1&a),d=(T=a<h?!T:T)?0:m;if(this._lock=1,this.render(d||(c?0:_round(a*o)),e,!m)._lock=0,!e&&this.parent&&_callback(this,"onRepeat"),this.vars.repeatRefresh&&!c&&(this.invalidate()._lock=1),d!==this._time||_!=!this._ts)return this;if(m=this._dur,f=this._tDur,y&&(this._lock=2,d=T?m:-1e-4,this.render(d,!0),this.vars.repeatRefresh&&!c&&this.invalidate()),this._lock=0,!this._ts&&!_)return this;_propagateYoyoEase(this,c)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=_findNextPauseTween(this,_round(d),_round(i)))&&(g-=i-(i=u._start)),this._tTime=g,this._time=i,this._act=!l,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,d=0),d||!(i||!m&&0<=t)||e||_callback(this,"onStart"),d<=i&&0<=t)for(n=this._first;n;){if(s=n._next,(n._act||i>=n._start)&&n._ts&&u!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(0<n._ts?(i-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(i-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!_){u=0,s&&(g+=this._zTime=-_tinyNum);break}}n=s}else{n=this._last;for(var v=t<0?t:i;n;){if(s=n._prev,(n._act||v<=n._end)&&n._ts&&u!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(0<n._ts?(v-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(v-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!_){u=0,s&&(g+=this._zTime=v?-_tinyNum:_tinyNum);break}}n=s}}if(u&&!e&&(this.pause(),u.render(d<=i?0:-_tinyNum)._zTime=d<=i?1:-1,this._ts))return this._start=p,_setEnd(this),this.render(t,e,r);this._onUpdate&&!e&&_callback(this,"onUpdate",!0),(g===f&&f>=this.totalDuration()||!g&&d)&&(p!==this._start&&Math.abs(l)===Math.abs(this._ts)||this._lock||(!t&&m||!(g===f&&0<this._ts||!g&&this._ts<0)||_removeFromParent(this,1),e||t<0&&!d||!g&&!d||(_callback(this,g===f?"onComplete":"onReverseComplete",!0),!this._prom||g<f&&0<this.timeScale()||this._prom())))}return this},e.add=function(t,e){var r=this;if(_isNumber(e)||(e=_parsePosition(this,e)),!(t instanceof Animation)){if(_isArray(t))return t.forEach(function(t){return r.add(t,e)}),this;if(_isString(t))return this.addLabel(t,e);if(!_isFunction(t))return this;t=Tween.delayedCall(0,t)}return this!==t?_addToTimeline(this,t,e):this},e.getChildren=function(t,e,r,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===i&&(i=-_bigNum);for(var n=[],s=this._first;s;)s._start>=i&&(s instanceof Tween?e&&n.push(s):(r&&n.push(s),t&&n.push.apply(n,s.getChildren(!0,e,r)))),s=s._next;return n},e.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},e.remove=function(t){return _isString(t)?this.removeLabel(t):_isFunction(t)?this.killTweensOf(t):(_removeLinkedListItem(this,t),t===this._recent&&(this._recent=this._last),_uncache(this))},e.totalTime=function(t,e){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=_round(_ticker.time-(0<this._ts?t/this._ts:(this.totalDuration()-t)/-this._ts))),r.prototype.totalTime.call(this,t,e),this._forcing=0,this):this._tTime},e.addLabel=function(t,e){return this.labels[t]=_parsePosition(this,e),this},e.removeLabel=function(t){return delete this.labels[t],this},e.addPause=function(t,e,r){r=Tween.delayedCall(0,e||_emptyFunc,r);return r.data="isPause",this._hasPause=1,_addToTimeline(this,r,_parsePosition(this,t))},e.removePause=function(t){var e=this._first;for(t=_parsePosition(this,t);e;)e._start===t&&"isPause"===e.data&&_removeFromParent(e),e=e._next},e.killTweensOf=function(t,e,r){for(var i=this.getTweensOf(t,r),n=i.length;n--;)_overwritingTween!==i[n]&&i[n].kill(t,e);return this},e.getTweensOf=function(t,e){for(var r,i=[],n=toArray(t),s=this._first,a=_isNumber(e);s;)s instanceof Tween?_arrayContainsAny(s._targets,n)&&(a?(!_overwritingTween||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&i.push(s):(r=s.getTweensOf(n,e)).length&&i.push.apply(i,r),s=s._next;return i},e.tweenTo=function(t,e){e=e||{};var r=this,i=_parsePosition(r,t),n=e.startAt,s=e.onStart,a=e.onStartParams,t=e.immediateRender,o=Tween.to(r,_setDefaults({ease:"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(n&&"time"in n?n.time:r._time))/r.timeScale())||_tinyNum,onStart:function(){r.pause();var t=e.duration||Math.abs((i-r._time)/r.timeScale());o._dur!==t&&_setDuration(o,t,0,1).render(o._time,!0,!0),s&&s.apply(o,a||[])}},e));return t?o.render(0):o},e.tweenFromTo=function(t,e,r){return this.tweenTo(e,_setDefaults({startAt:{time:_parsePosition(this,t)}},r))},e.recent=function(){return this._recent},e.nextLabel=function(t){return void 0===t&&(t=this._time),_getLabelInDirection(this,_parsePosition(this,t))},e.previousLabel=function(t){return void 0===t&&(t=this._time),_getLabelInDirection(this,_parsePosition(this,t),1)},e.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+_tinyNum)},e.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var i,n=this._first,s=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(i in s)s[i]>=r&&(s[i]+=t);return _uncache(this)},e.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return r.prototype.invalidate.call(this)},e.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),_uncache(this)},e.totalDuration=function(t){var e,r,i,n=0,s=this,a=s._last,o=_bigNum;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(i=s.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),o<(r=a._start)&&s._sort&&a._ts&&!s._lock?(s._lock=1,_addToTimeline(s,a,r-a._delay,1)._lock=0):o=r,r<0&&a._ts&&(n-=r,(!i&&!s._dp||i&&i.smoothChildTiming)&&(s._start+=r/s._ts,s._time-=r,s._tTime-=r),s.shiftChildren(-r,!1,-Infinity),o=0),a._end>n&&a._ts&&(n=a._end),a=e;_setDuration(s,s===_globalTimeline&&s._time>n?s._time:n,1,1),s._dirty=0}return s._tDur},t.updateRoot=function(t){if(_globalTimeline._ts&&(_lazySafeRender(_globalTimeline,_parentToChildTotalTime(t,_globalTimeline)),_lastRenderedFrame=_ticker.frame),_ticker.frame>=_nextGCFrame){_nextGCFrame+=_config.autoSleep||120;var e=_globalTimeline._first;if((!e||!e._ts)&&_config.autoSleep&&_ticker._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||_ticker.sleep()}}},t}(Animation);exports.TimelineLite=exports.TimelineMax=exports.Timeline=Timeline,_setDefaults(Timeline.prototype,{_lock:0,_hasPause:0,_forcing:0});var _overwritingTween,_addComplexStringPropTween=function(t,e,r,i,n,s,a){var o,_,u,l,p,h=new PropTween(this._pt,t,e,0,1,_renderComplexString,null,n),c=0,d=0;for(h.b=r,h.e=i,r+="",(n=~(i+="").indexOf("random("))&&(i=_replaceRandom(i)),s&&(s(s=[r,i],t,e),r=s[0],i=s[1]),o=r.match(_complexStringNumExp)||[];p=_complexStringNumExp.exec(i);)u=p[0],l=i.substring(c,p.index),_?_=(_+1)%5:"rgba("===l.substr(-5)&&(_=1),u!==o[d++]&&(p=parseFloat(o[d-1])||0,h._pt={_next:h._pt,p:l||1===d?l:",",s:p,c:"="===u.charAt(1)?parseFloat(u.substr(2))*("-"===u.charAt(0)?-1:1):parseFloat(u)-p,m:_&&_<4?Math.round:0},c=_complexStringNumExp.lastIndex);return h.c=c<i.length?i.substring(c,i.length):"",h.fp=a,(_relExp.test(i)||n)&&(h.e=0),this._pt=h},_addPropTween=function(t,e,r,i,n,s,a,o,_){_isFunction(i)&&(i=i(n||0,t,s));n=t[e],s="get"!==r?r:_isFunction(n)?_?t[e.indexOf("set")||!_isFunction(t["get"+e.substr(3)])?e:"get"+e.substr(3)](_):t[e]():n,r=_isFunction(n)?_?_setterFuncWithParam:_setterFunc:_setterPlain;if(s!==(i=_isString(i)&&"="===(i=~i.indexOf("random(")?_replaceRandom(i):i).charAt(1)?parseFloat(s)+parseFloat(i.substr(2))*("-"===i.charAt(0)?-1:1)+(getUnit(s)||0):i))return isNaN(s*i)?(n||e in t||_missingPlugin(e,i),_addComplexStringPropTween.call(this,t,e,s,i,r,o||_config.stringFilter,_)):(r=new PropTween(this._pt,t,e,+s||0,i-(s||0),"boolean"==typeof n?_renderBoolean:_renderPlain,0,r),_&&(r.fp=_),a&&r.modifier(a,this,t),this._pt=r)},_processVars=function(t,e,r,i,n){if(_isFunction(t)&&(t=_parseFuncOrString(t,n,e,r,i)),!_isObject(t)||t.style&&t.nodeType||_isArray(t)||_isTypedArray(t))return _isString(t)?_parseFuncOrString(t,n,e,r,i):t;var s,a={};for(s in t)a[s]=_parseFuncOrString(t[s],n,e,r,i);return a},_checkPlugin=function(t,e,r,i,n,s){var a,o,_,u;if(_plugins[t]&&!1!==(a=new _plugins[t]).init(n,a.rawVars?e[t]:_processVars(e[t],i,n,s,r),r,i,s)&&(r._pt=o=new PropTween(r._pt,n,t,0,1,a.render,a,0,a.priority),r!==_quickTween))for(_=r._ptLookup[r._targets.indexOf(n)],u=a._props.length;u--;)_[a._props[u]]=o;return a},_initTween=function t(e,r){var i,n,s,a,o,_,u,l,p,h,c,d,f,m=e.vars,g=m.ease,T=m.startAt,y=m.immediateRender,v=m.lazy,x=m.onUpdate,w=m.onUpdateParams,b=m.callbackScope,P=m.runBackwards,k=m.yoyoEase,E=m.keyframes,S=m.autoRevert,A=e._dur,C=e._startAt,D=e._targets,M=e.parent,F=M&&"nested"===M.data?M.parent._targets:D,N="auto"===e._overwrite&&!_suppressOverwrites,R=e.timeline;if(!R||E&&g||(g="none"),e._ease=_parseEase(g,_defaults.ease),e._yEase=k?_invertEase(_parseEase(!0===k?g:k,_defaults.ease)):0,k&&e._yoyo&&!e._repeat&&(k=e._yEase,e._yEase=e._ease,e._ease=k),!R){if(d=(l=D[0]?_getCache(D[0]).harness:0)&&m[l.prop],i=_copyExcluding(m,_reservedProps),C&&C.render(-1,!0).kill(),T){if(_removeFromParent(e._startAt=Tween.set(D,_setDefaults({data:"isStart",overwrite:!1,parent:M,immediateRender:!0,lazy:_isNotFalse(v),startAt:null,delay:0,onUpdate:x,onUpdateParams:w,callbackScope:b,stagger:0},T))),y)if(0<r)S||(e._startAt=0);else if(A&&!(r<0&&C))return void(r&&(e._zTime=r))}else if(P&&A)if(C)S||(e._startAt=0);else if(s=_setDefaults({overwrite:!1,data:"isFromStart",lazy:(y=r?!1:y)&&_isNotFalse(v),immediateRender:y,stagger:0,parent:M},i),d&&(s[l.prop]=d),_removeFromParent(e._startAt=Tween.set(D,s)),y){if(!r)return}else t(e._startAt,_tinyNum);for(e._pt=0,v=A&&_isNotFalse(v)||v&&!A,n=0;n<D.length;n++){if(u=(o=D[n])._gsap||_harness(D)[n]._gsap,e._ptLookup[n]=h={},_lazyLookup[u.id]&&_lazyTweens.length&&_lazyRender(),c=F===D?n:F.indexOf(o),l&&!1!==(p=new l).init(o,d||i,e,c,F)&&(e._pt=a=new PropTween(e._pt,o,p.name,0,1,p.render,p,0,p.priority),p._props.forEach(function(t){h[t]=a}),p.priority&&(_=1)),!l||d)for(s in i)_plugins[s]&&(p=_checkPlugin(s,i,e,c,o,F))?p.priority&&(_=1):h[s]=a=_addPropTween.call(e,o,s,"get",i[s],c,F,0,m.stringFilter);e._op&&e._op[n]&&e.kill(o,e._op[n]),N&&e._pt&&(_overwritingTween=e,_globalTimeline.killTweensOf(o,h,e.globalTime(0)),f=!e.parent,_overwritingTween=0),e._pt&&v&&(_lazyLookup[u.id]=1)}_&&_sortPropTweensByPriority(e),e._onInit&&e._onInit(e)}e._from=!R&&!!m.runBackwards,e._onUpdate=x,e._initted=(!e._op||e._pt)&&!f},_addAliasesToVars=function(t,e){var r,i,n,s,t=t[0]?_getCache(t[0]).harness:0,a=t&&t.aliases;if(!a)return e;for(i in r=_merge({},e),a)if(i in r)for(n=(s=a[i].split(",")).length;n--;)r[s[n]]=r[i];return r},_parseFuncOrString=function(t,e,r,i,n){return _isFunction(t)?t.call(e,r,i,n):_isString(t)&&~t.indexOf("random(")?_replaceRandom(t):t},_staggerTweenProps=_callbackNames+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",_staggerPropsToSkip=(_staggerTweenProps+",id,stagger,delay,duration,paused,scrollTrigger").split(",");exports._checkPlugin=_checkPlugin;var Tween=function(w){function n(t,e,r,i){var n;"number"==typeof e&&(r.duration=e,e=r,r=null);var s,a,o,_,u,l,p,h,c=(n=w.call(this,i?e:_inheritDefaults(e),r)||this).vars,d=c.duration,f=c.delay,m=c.immediateRender,g=c.stagger,T=c.overwrite,y=c.keyframes,i=c.defaults,r=c.scrollTrigger,v=c.yoyoEase,c=n.parent,x=(_isArray(t)||_isTypedArray(t)?_isNumber(t[0]):"length"in e)?[t]:toArray(t);if(n._targets=x.length?_harness(x):_warn("GSAP target "+t+" not found. https://greensock.com",!_config.nullTargetWarn)||[],n._ptLookup=[],n._overwrite=T,y||g||_isFuncOrString(d)||_isFuncOrString(f)){if(e=n.vars,(s=n.timeline=new Timeline({data:"nested",defaults:i||{}})).kill(),s.parent=s._dp=_assertThisInitialized(n),s._start=0,y)_setDefaults(s.vars.defaults,{ease:"none"}),y.forEach(function(t){return s.to(x,t,">")});else{if(_=x.length,p=g?distribute(g):_emptyFunc,_isObject(g))for(u in g)~_staggerTweenProps.indexOf(u)&&((h=h||{})[u]=g[u]);for(a=0;a<_;a++){for(u in o={},e)_staggerPropsToSkip.indexOf(u)<0&&(o[u]=e[u]);o.stagger=0,v&&(o.yoyoEase=v),h&&_merge(o,h),l=x[a],o.duration=+_parseFuncOrString(d,_assertThisInitialized(n),a,l,x),o.delay=(+_parseFuncOrString(f,_assertThisInitialized(n),a,l,x)||0)-n._delay,!g&&1===_&&o.delay&&(n._delay=f=o.delay,n._start+=f,o.delay=0),s.to(l,o,p(a,l,x))}s.duration()?d=f=0:n.timeline=0}d||n.duration(d=s.duration())}else n.timeline=0;return!0!==T||_suppressOverwrites||(_overwritingTween=_assertThisInitialized(n),_globalTimeline.killTweensOf(x),_overwritingTween=0),c&&_postAddChecks(c,_assertThisInitialized(n)),(m||!d&&!y&&n._start===_round(c._time)&&_isNotFalse(m)&&_hasNoPausedAncestors(_assertThisInitialized(n))&&"nested"!==c.data)&&(n._tTime=-_tinyNum,n.render(Math.max(0,-f))),r&&_scrollTrigger(_assertThisInitialized(n),r),n}_inheritsLoose(n,w);var t=n.prototype;return t.render=function(t,e,r){var i,n,s,a,o,_,u,l,p,h=this._time,c=this._tDur,d=this._dur,f=c-_tinyNum<t&&0<=t?c:t<_tinyNum?0:t;if(d){if(f!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(i=f,l=this.timeline,this._repeat){if(a=d+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,r);if(i=_round(f%a),f===c?(s=this._repeat,i=d):((s=~~(f/a))&&s===f/a&&(i=d,s--),d<i&&(i=d)),(_=this._yoyo&&1&s)&&(p=this._yEase,i=d-i),o=_animationCycle(this._tTime,a),i===h&&!r&&this._initted)return this;s!==o&&(l&&this._yEase&&_propagateYoyoEase(l,_),!this.vars.repeatRefresh||_||this._lock||(this._lock=r=1,this.render(_round(a*s),!0).invalidate()._lock=0))}if(!this._initted){if(_attemptInitTween(this,t<0?t:i,r,e))return this._tTime=0,this;if(d!==this._dur)return this.render(t,e,r)}for(this._tTime=f,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(p||this._ease)(i/d),this._from&&(this.ratio=u=1-u),!i||h||e||_callback(this,"onStart"),n=this._pt;n;)n.r(u,n.d),n=n._next;l&&l.render(t<0?t:!i&&_?-_tinyNum:l._dur*u,e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),_callback(this,"onUpdate")),this._repeat&&s!==o&&this.vars.onRepeat&&!e&&this.parent&&_callback(this,"onRepeat"),f!==this._tDur&&f||this._tTime!==f||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),!t&&d||!(f===this._tDur&&0<this._ts||!f&&this._ts<0)||_removeFromParent(this,1),e||t<0&&!h||!f&&!h||(_callback(this,f===c?"onComplete":"onReverseComplete",!0),!this._prom||f<c&&0<this.timeScale()||this._prom()))}}else _renderZeroDurationTween(this,t,e,r);return this},t.targets=function(){return this._targets},t.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),w.prototype.invalidate.call(this)},t.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?_interrupt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,_overwritingTween&&!0!==_overwritingTween.vars.overwrite)._first||_interrupt(this),this.parent&&r!==this.timeline.totalDuration()&&_setDuration(this,this._dur*this.timeline._tDur/r,0,1),this}var i,n,s,a,o,_,u,l=this._targets,p=t?toArray(t):l,h=this._ptLookup,t=this._pt;if((!e||"all"===e)&&_arraysMatch(l,p))return"all"===e&&(this._pt=0),_interrupt(this);for(i=this._op=this._op||[],"all"!==e&&(_isString(e)&&(o={},_forEachName(e,function(t){return o[t]=1}),e=o),e=_addAliasesToVars(l,e)),u=l.length;u--;)if(~p.indexOf(l[u]))for(o in n=h[u],"all"===e?(i[u]=e,a=n,s={}):(s=i[u]=i[u]||{},a=e),a)(_=n&&n[o])&&("kill"in _.d&&!0!==_.d.kill(o)||_removeLinkedListItem(this,_,"_pt"),delete n[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&t&&_interrupt(this),this},n.to=function(t,e){return new n(t,e,arguments[2])},n.from=function(t,e){return new n(t,_parseVars(arguments,1))},n.delayedCall=function(t,e,r,i){return new n(e,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:e,onReverseComplete:e,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},n.fromTo=function(t,e,r){return new n(t,_parseVars(arguments,2))},n.set=function(t,e){return e.duration=0,e.repeatDelay||(e.repeat=0),new n(t,e)},n.killTweensOf=function(t,e,r){return _globalTimeline.killTweensOf(t,e,r)},n}(Animation);exports.TweenLite=exports.TweenMax=exports.Tween=Tween,_setDefaults(Tween.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),_forEachName("staggerTo,staggerFrom,staggerFromTo",function(r){Tween[r]=function(){var t=new Timeline,e=_slice.call(arguments,0);return e.splice("staggerFromTo"===r?5:4,0,0),t[r].apply(t,e)}});var _setterPlain=function(t,e,r){return t[e]=r},_setterFunc=function(t,e,r){return t[e](r)},_setterFuncWithParam=function(t,e,r,i){return t[e](i.fp,r)},_setterAttribute=function(t,e,r){return t.setAttribute(e,r)},_getSetter=function(t,e){return _isFunction(t[e])?_setterFunc:_isUndefined(t[e])&&t.setAttribute?_setterAttribute:_setterPlain},_renderPlain=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4,e)},_renderBoolean=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},_renderComplexString=function(t,e){var r=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;r;)i=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+i,r=r._next;i+=e.c}e.set(e.t,e.p,i,e)},_renderPropTweens=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},_addPluginModifier=function(t,e,r,i){for(var n,s=this._pt;s;)n=s._next,s.p===i&&s.modifier(t,e,r),s=n},_killPropTweensOf=function(t){for(var e,r,i=this._pt;i;)r=i._next,i.p===t&&!i.op||i.op===t?_removeLinkedListItem(this,i,"_pt"):i.dep||(e=1),i=r;return!e},_setterWithModifier=function(t,e,r,i){i.mSet(t,e,i.m.call(i.tween,r,i.mt),i)},_sortPropTweensByPriority=function(t){for(var e,r,i,n,s=t._pt;s;){for(e=s._next,r=i;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:n)?s._prev._next=s:i=s,(s._next=r)?r._prev=s:n=s,s=e}t._pt=i};exports._sortPropTweensByPriority=_sortPropTweensByPriority,exports._renderComplexString=_renderComplexString,exports._getSetter=_getSetter;var PropTween=function(){function t(t,e,r,i,n,s,a,o,_){this.t=e,this.s=i,this.c=n,this.p=r,this.r=s||_renderPlain,this.d=a||this,this.set=o||_setterPlain,this.pr=_||0,(this._next=t)&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=_setterWithModifier,this.m=t,this.mt=r,this.tween=e},t}();exports.PropTween=PropTween,_forEachName(_callbackNames+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(t){return _reservedProps[t]=1}),_globals.TweenMax=_globals.TweenLite=Tween,_globals.TimelineLite=_globals.TimelineMax=Timeline,_globalTimeline=new Timeline({sortChildren:!1,defaults:_defaults,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),_config.stringFilter=_colorStringFilter;var _gsap={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach(function(t){return _createPlugin(t)})},timeline:function(t){return new Timeline(t)},getTweensOf:function(t,e){return _globalTimeline.getTweensOf(t,e)},getProperty:function(i,t,e,r){_isString(i)&&(i=toArray(i)[0]);var n=_getCache(i||{}).get,s=e?_passThrough:_numericIfPossible;return"native"===e&&(e=""),i&&(t?s((_plugins[t]&&_plugins[t].get||n)(i,t,e,r)):function(t,e,r){return s((_plugins[t]&&_plugins[t].get||n)(i,t,e,r))})},quickSetter:function(r,e,i){if(1<(r=toArray(r)).length){var n=r.map(function(t){return gsap.quickSetter(t,e,i)}),s=n.length;return function(t){for(var e=s;e--;)n[e](t)}}r=r[0]||{};var a=_plugins[e],o=_getCache(r),_=o.harness&&(o.harness.aliases||{})[e]||e,u=a?function(t){var e=new a;_quickTween._pt=0,e.init(r,i?t+i:t,_quickTween,0,[r]),e.render(1,e),_quickTween._pt&&_renderPropTweens(1,_quickTween)}:o.set(r,_);return a?u:function(t){return u(r,_,i?t+i:t,o,1)}},isTweening:function(t){return 0<_globalTimeline.getTweensOf(t,!0).length},defaults:function(t){return t&&t.ease&&(t.ease=_parseEase(t.ease,_defaults.ease)),_mergeDeep(_defaults,t||{})},config:function(t){return _mergeDeep(_config,t||{})},registerEffect:function(t){var i=t.name,n=t.effect,e=t.plugins,s=t.defaults,t=t.extendTimeline;(e||"").split(",").forEach(function(t){return t&&!_plugins[t]&&!_globals[t]&&_warn(i+" effect requires "+t+" plugin.")}),_effects[i]=function(t,e,r){return n(toArray(t),_setDefaults(e||{},s),r)},t&&(Timeline.prototype[i]=function(t,e,r){return this.add(_effects[i](t,_isObject(e)?e:(r=e)&&{},this),r)})},registerEase:function(t,e){_easeMap[t]=_parseEase(e)},parseEase:function(t,e){return arguments.length?_parseEase(t,e):_easeMap},getById:function(t){return _globalTimeline.getById(t)},exportRoot:function(t,e){var r,i,n=new Timeline(t=void 0===t?{}:t);for(n.smoothChildTiming=_isNotFalse(t.smoothChildTiming),_globalTimeline.remove(n),n._dp=0,n._time=n._tTime=_globalTimeline._time,r=_globalTimeline._first;r;)i=r._next,!e&&!r._dur&&r instanceof Tween&&r.vars.onComplete===r._targets[0]||_addToTimeline(n,r,r._start-r._delay),r=i;return _addToTimeline(_globalTimeline,n,0),n},utils:{wrap:wrap,wrapYoyo:wrapYoyo,distribute:distribute,random:random,snap:snap,normalize:normalize,getUnit:getUnit,clamp:clamp,splitColor:splitColor,toArray:toArray,mapRange:mapRange,pipe:pipe,unitize:unitize,interpolate:interpolate,shuffle:shuffle},install:_install,effects:_effects,ticker:_ticker,updateRoot:Timeline.updateRoot,plugins:_plugins,globalTimeline:_globalTimeline,core:{PropTween:PropTween,globals:_addGlobal,Tween:Tween,Timeline:Timeline,Animation:Animation,getCache:_getCache,_removeLinkedListItem:_removeLinkedListItem,suppressOverwrites:function(t){return _suppressOverwrites=t}}};_forEachName("to,from,fromTo,delayedCall,set,killTweensOf",function(t){return _gsap[t]=Tween[t]}),_ticker.add(Timeline.updateRoot),_quickTween=_gsap.to({},{duration:0});var _getPluginPropTween=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},_addModifiers=function(t,e){var r,i,n,s=t._targets;for(r in e)for(i=s.length;i--;)(n=(n=t._ptLookup[i][r])&&n.d)&&(n=n._pt?_getPluginPropTween(n,r):n)&&n.modifier&&n.modifier(e[r],t,s[i],r)},_buildModifierPlugin=function(t,n){return{name:t,rawVars:1,init:function(t,i,e){e._onInit=function(t){var e,r;if(_isString(i)&&(e={},_forEachName(i,function(t){return e[t]=1}),i=e),n){for(r in e={},i)e[r]=n(i[r]);i=e}_addModifiers(t,i)}}}},gsap=_gsap.registerPlugin({name:"attr",init:function(t,e,r,i,n){var s,a;for(s in e)(a=this.add(t,"setAttribute",(t.getAttribute(s)||0)+"",e[s],i,n,0,0,s))&&(a.op=s),this._props.push(s)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},_buildModifierPlugin("roundProps",_roundModifier),_buildModifierPlugin("modifiers"),_buildModifierPlugin("snap",snap))||_gsap;exports.default=exports.gsap=gsap,Tween.version=Timeline.version=gsap.version="3.6.0",_coreReady=1,_windowExists()&&_wake();var Power0=_easeMap.Power0,Power1=_easeMap.Power1,Power2=_easeMap.Power2,Power3=_easeMap.Power3,Power4=_easeMap.Power4,Linear=_easeMap.Linear,Quad=_easeMap.Quad,Cubic=_easeMap.Cubic,Quart=_easeMap.Quart,Quint=_easeMap.Quint,Strong=_easeMap.Strong,Elastic=_easeMap.Elastic,Back=_easeMap.Back,SteppedEase=_easeMap.SteppedEase,Bounce=_easeMap.Bounce,Sine=_easeMap.Sine,Expo=_easeMap.Expo,Circ=_easeMap.Circ;exports.Circ=Circ,exports.Expo=Expo,exports.Sine=Sine,exports.Bounce=Bounce,exports.SteppedEase=SteppedEase,exports.Back=Back,exports.Elastic=Elastic,exports.Strong=Strong,exports.Quint=Quint,exports.Quart=Quart,exports.Cubic=Cubic,exports.Quad=Quad,exports.Linear=Linear,exports.Power4=Power4,exports.Power3=Power3,exports.Power2=Power2,exports.Power1=Power1,exports.Power0=Power0;
"use strict";!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).window=e.window||{})}(void 0,function(e){function we(e){return e}function n(){return"undefined"!=typeof window}function o(){return Ue||n()&&(Ue=window.gsap)&&Ue.registerPlugin&&Ue}function Ce(e){return!!~p.indexOf(e)}function Oe(e,t){return~ct.indexOf(e)&&ct[ct.indexOf(e)+1][t]}function Te(t,e){var r=e.s,n=e.sc,o=C.indexOf(t),e=n===kt.sc?1:2;return~o||(o=C.push(t)-1),C[o+e]||(C[o+e]=Oe(t,r)||(Ce(t)?n:function(e){return arguments.length?t[r]=e:t[r]}))}function ke(e){return Oe(e,"getBoundingClientRect")||(Ce(e)?function(){return Lt.width=Ze.innerWidth,Lt.height=Ze.innerHeight,Lt}:function(){return Mt(e)})}function Me(e,t){var r=t.s,n=t.d2,o=t.d,t=t.a;return(r="scroll"+n)&&(t=Oe(e,r))?t()-ke(e)()[o]:Ce(e)?Math.max(Ge[r],Je[r])-(Ze["inner"+n]||Ge["client"+n]||Je["client"+n]):e[r]-e["offset"+n]}function i(e,t){for(var r=0;r<b.length;r+=3)t&&!~t.indexOf(b[r+1])||e(b[r],b[r+1],b[r+2])}function Se(e){return"string"==typeof e}function Ee(e){return"function"==typeof e}function Pe(e){return"number"==typeof e}function _e(e){return"object"==typeof e}function s(e){return Ee(e)&&e()}function a(r,n){return function(){var e=s(r),t=s(n);return function(){s(e),s(t)}}}function ze(e){return Ze.getComputedStyle(e)}function Ae(e,t){for(var r in t)r in e||(e[r]=t[r]);return e}function Le(e,t){return t=t.d2,e["offset"+t]||e["client"+t]||0}function Re(e){var t,r=[],n=e.labels,o=e.duration();for(t in n)r.push(n[t]/o);return r}function l(t,r,e,n){return e.split(",").forEach(function(e){return t(r,e,n)})}function Be(e,t,r){return e.addEventListener(t,r,{passive:!0})}function Ie(e,t,r){return e.removeEventListener(t,r)}function Ne(e,t){var r,n;return Se(e)&&(n=~(r=e.indexOf("="))?+(e.charAt(r-1)+1)*parseFloat(e.substr(r+1)):0,~r&&(e.indexOf("%")>r&&(n*=t/100),e=e.substr(0,r-1)),e=n+(e in P?P[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)),e}function Fe(e,t,r,n,o,i,s){var a=o.startColor,l=o.endColor,c=o.fontSize,u=o.indent,f=o.fontWeight,p=$e.createElement("div"),d=Ce(r)||"fixed"===Oe(r,"pinType"),h=-1!==e.indexOf("scroller"),o=d?Je:r,r=-1!==e.indexOf("start"),f="border-color:"+(l=r?a:l)+";font-size:"+c+";color:"+l+";font-weight:"+f+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return f+="position:"+(h&&d?"fixed;":"absolute;"),!h&&d||(f+=(n===kt?M:S)+":"+(i+parseFloat(u))+"px;"),s&&(f+="box-sizing:border-box;text-align:left;width:"+s.offsetWidth+"px;"),p._isStart=r,p.setAttribute("class","gsap-marker-"+e),p.style.cssText=f,p.innerText=t||0===t?e+"-"+t:e,o.children[0]?o.insertBefore(p,o.children[0]):o.appendChild(p),p._offset=p["offset"+n.op.d2],_(p,0,n,r),p}function c(){return g=g||h(D)}function We(){g||(g=h(D),ft||R("scrollStart"),ft=ut())}function De(){return!tt&&!r&&!$e.fullscreenElement&&d.restart(!0)}function u(e){var t,r=Ue.ticker.frame,n=[],o=0;if(w!==r||lt){for(N();o<L.length;o+=4)(t=Ze.matchMedia(L[o]).matches)!==L[o+3]&&((L[o+3]=t)?n.push(o):N(1,L[o])||Ee(L[o+2])&&L[o+2]());for(I(),o=0;o<n.length;o++)t=n[o],at=L[t],L[t+2]=L[t+1](e);at=0,f&&F(0,1),w=r,R("matchMedia")}}function He(){return Ie(Y,"scrollEnd",He)||F(!0)}function qe(e,t,r,n){if(e.parentNode!==t){for(var o,i=H.length,s=t.style,a=e.style;i--;)s[o=H[i]]=r[o];s.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(s.display="inline-block"),a[S]=a[M]="auto",s.overflow="visible",s.boxSizing="border-box",s[ht]=Le(e,Tt)+Ot,s[gt]=Le(e,kt)+Ot,s[bt]=a[wt]=a.top=a[k]="0",At(n),a[ht]=a.maxWidth=r[ht],a[gt]=a.maxHeight=r[gt],a[bt]=r[bt],e.parentNode.insertBefore(t,e),t.appendChild(e)}}function je(e){for(var t=q.length,r=e.style,n=[],o=0;o<t;o++)n.push(q[o],r[q[o]]);return n.t=e,n}function Xe(e,t,r,n,o,i,s,a,l,c,u,f){var p,d;return Ee(e)&&(e=e(a)),Se(e)&&"max"===e.substr(0,3)&&(e=f+("="===e.charAt(4)?Ne("0"+e.substr(3),r):0)),Pe(e)?s&&_(s,r,n,!0):(Ee(t)&&(t=t(a)),p=Ke(t)[0]||Je,a=Mt(p)||{},d=e.split(" "),a&&(a.left||a.top)||"none"!==ze(p).display||(t=p.style.display,p.style.display="block",a=Mt(p),t?p.style.display=t:p.style.removeProperty("display")),p=Ne(d[0],a[n.d]),d=Ne(d[1]||"0",r),e=a[n.p]-l[n.p]-c+p+o-d,s&&_(s,d,n,r-d<20||s._isStart&&20<d),r-=r-d),i&&(d=e+r,r=i._isStart,f="scroll"+n.d2,_(i,d,n,r&&20<d||!r&&(u?Math.max(Je[f],Ge[f]):i.parentNode[f])<=d+1),u&&(l=Mt(s),u&&(i.style[n.op.p]=l[n.op.p]-n.op.m-i._offset+Ot))),Math.round(e)}function Ye(e,t,r,n){if(e.parentNode!==t){var o,i,s=e.style;if(t===Je){for(o in e._stOrig=s.cssText,i=ze(e))+o||X.test(o)||!i[o]||"string"!=typeof s[o]||"0"===o||(s[o]=i[o]);s.top=r,s.left=n}else s.cssText=e._stOrig;Ue.core.getCache(e).uncache=1,t.appendChild(e)}}function Ve(l,e){function c(e,t,r,n,o){var i=c.tween,s=t.onComplete,a={};return i&&i.kill(),u=Math.round(r),t[d]=e,(t.modifiers=a)[d]=function(e){return(e=Math.round(p()))!==u&&e!==f&&2<Math.abs(e-u)?(i.kill(),c.tween=0):e=r+n*i.ratio+o*i.ratio*i.ratio,f=u,u=Math.round(e)},t.onComplete=function(){c.tween=0,s&&s.call(i)},i=c.tween=Ue.to(l,t)}var u,f,p=Te(l,e),d="_scroll"+e.p2;return l[d]=p,l.addEventListener("mousewheel",function(){return c.tween&&c.tween.kill()&&(c.tween=0)}),c}var Ue,f,Ze,$e,Ge,Je,p,d,h,g,Ke,Qe,et,v,tt,rt,m,nt,x,y,b,ot,it,r,st,at,w,lt=1,ct=[],C=[],ut=Date.now,O=ut(),ft=0,pt=1,dt=Math.abs,t="scrollLeft",T="scrollTop",k="left",M="right",S="bottom",ht="width",gt="height",vt="Right",mt="Left",xt="Top",yt="Bottom",bt="padding",wt="margin",Ct="Width",E="Height",Ot="px",Tt={s:t,p:k,p2:mt,os:M,os2:vt,d:ht,d2:Ct,a:"x",sc:function(e){return arguments.length?Ze.scrollTo(e,kt.sc()):Ze.pageXOffset||$e[t]||Ge[t]||Je[t]||0}},kt={s:T,p:"top",p2:xt,os:S,os2:yt,d:gt,d2:E,a:"y",op:Tt,sc:function(e){return arguments.length?Ze.scrollTo(Tt.sc(),e):Ze.pageYOffset||$e[T]||Ge[T]||Je[T]||0}},Mt=function(e,t){t=t&&"matrix(1, 0, 0, 1, 0, 0)"!==ze(e)[m]&&Ue.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),e=e.getBoundingClientRect();return t&&t.progress(0).kill(),e},St={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Et={toggleActions:"play",anticipatePin:0},P={top:0,left:0,center:.5,bottom:1,right:1},_=function(e,t,r,n){var o={display:"block"},i=r[n?"os2":"p2"],s=r[n?"p2":"os2"];e._isFlipped=n,o[r.a+"Percent"]=n?-100:0,o[r.a]=n?"1px":0,o["border"+i+Ct]=1,o["border"+s+Ct]=0,o[r.p]=t+"px",Ue.set(e,o)},Pt=[],_t={},z={},A=[],L=[],R=function(e){return z[e]&&z[e].map(function(e){return e()})||A},B=[],I=function(e){for(var t=0;t<B.length;t+=4)e&&B[t+3]!==e||(B[t].style.cssText=B[t+1],B[t+2].uncache=1)},N=function(e,t){var r;for(nt=0;nt<Pt.length;nt++)r=Pt[nt],t&&r.media!==t||(e?r.kill(1):(r.scroll.rec||(r.scroll.rec=r.scroll()),r.revert()));I(t),t||R("revert")},F=function(e,t){if(!ft||e){e=R("refreshInit");for(ot&&Y.sort(),t||N(),nt=0;nt<Pt.length;nt++)Pt[nt].refresh();for(e.forEach(function(e){return e&&e.render&&e.render(-1)}),nt=Pt.length;nt--;)Pt[nt].scroll.rec=0;d.pause(),R("refresh")}else Be(Y,"scrollEnd",He)},W=0,zt=1,D=function(){var e=Pt.length,t=ut(),r=50<=t-O,n=e&&Pt[0].scroll();if(zt=n<W?-1:1,W=n,r&&(ft&&!rt&&200<t-ft&&(ft=0,R("scrollEnd")),et=O,O=t),zt<0){for(nt=e;nt--;)Pt[nt]&&Pt[nt].update(0,r);zt=1}else for(nt=0;nt<e;nt++)Pt[nt]&&Pt[nt].update(0,r);g=0},H=[k,"top",S,M,wt+yt,wt+vt,wt+xt,wt+mt,"display","flexShrink","float","zIndex"],q=H.concat([ht,gt,"boxSizing","max"+Ct,"max"+E,"position",wt,bt,bt+xt,bt+vt,bt+yt,bt+mt]),j=/([A-Z])/g,At=function(e){if(e){var t,r,n=e.t.style,o=e.length,i=0;for((e.t._gsap||Ue.core.getCache(e.t)).uncache=1;i<o;i+=2)r=e[i+1],t=e[i],r?n[t]=r:n[t]&&n.removeProperty(t.replace(j,"-$1").toLowerCase())}},Lt={left:0,top:0},X=/(?:webkit|moz|length|cssText|inset)/i;Tt.op=kt;var Y=(Rt.prototype.init=function(g,v){var m,u,f,n,p,x,e,y,b,w,C,d,t,l,h,O,T,k,M,r,S,E,P,_,z,A,o,L,R,B,i,c,I,N,F,W,D,H,q,j,X,Y,V,U,Z,$,G,J,K,Q,ee,te,re,ne,s,oe,ie,se,a,ae,le,ce,ue,fe,pe,de,he,ge,ve,me,xe,ye,be;this.progress=this.start=0,this.vars&&this.kill(1),pt?(m=(g=Ae(Se(g)||Pe(g)||g.nodeType?{trigger:g}:g,Et)).horizontal?Tt:kt,u=g.onUpdate,f=g.toggleClass,n=g.id,p=g.onToggle,x=g.onRefresh,e=g.scrub,y=g.trigger,b=g.pin,w=g.pinSpacing,C=g.invalidateOnRefresh,d=g.anticipatePin,t=g.onScrubComplete,l=g.onSnapComplete,h=g.once,O=g.snap,T=g.pinReparent,k=!e&&0!==e,M=Ke(g.scroller||Ze)[0],r=Ue.core.getCache(M),S=Ce(M),E="pinType"in g?"fixed"===g.pinType:S||"fixed"===Oe(M,"pinType"),P=[g.onEnter,g.onLeave,g.onEnterBack,g.onLeaveBack],_=k&&g.toggleActions.split(" "),be=("markers"in g?g:Et).markers,z=!S&&parseFloat(ze(M)["border"+m.p2+Ct])||0,A=this,o=g.onRefreshInit&&function(){return g.onRefreshInit(A)},pe=M,de=S,ge=(he=m).d,ve=he.d2,me=he.a,L=(me=Oe(pe,"getBoundingClientRect"))?function(){return me()[ge]}:function(){return(de?Ze["inner"+ve]:pe["client"+ve])||0},he=M,R=!S||~ct.indexOf(he)?ke(he):function(){return Lt},A.media=at,d*=45,Pt.push(A),A.scroller=M,A.scroll=Te(M,m),N=A.scroll(),A.vars=g,v=v||g.animation,"refreshPriority"in g&&(ot=1),r.tweenScroll=r.tweenScroll||{top:Ve(M,kt),left:Ve(M,Tt)},A.tweenTo=B=r.tweenScroll[m.p],v&&(v.vars.lazy=!1,v._initted||!1!==v.vars.immediateRender&&!1!==g.immediateRender&&v.render(0,!0,!0),A.animation=v.pause(),v.scrollTrigger=A,(a=Pe(e)&&e)&&(se=Ue.to(v,{ease:"power3",duration:a,onComplete:function(){return t&&t(A)}})),oe=0,n=n||v.vars.id),O&&(_e(O)||(O={snapTo:O}),"scrollBehavior"in Je.style&&Ue.set(S?[Je,Ge]:M,{scrollBehavior:"auto"}),c=Ee(O.snapTo)?O.snapTo:"labels"===O.snapTo?(ye=v,function(e){return Ue.utils.snap(Re(ye),e)}):"labelsDirectional"===O.snapTo?(xe=v,function(e,t){var r,n=Re(xe);if(n.sort(function(e,t){return e-t}),0<t.direction){for(r=0;r<n.length;r++)if(n[r]>=e)return n[r];return n.pop()}for(r=n.length;r--;)if(n[r]<=e)return n[r];return n[0]}):Ue.utils.snap(O.snapTo),ae=O.duration||{min:.1,max:2},ae=_e(ae)?Qe(ae.min,ae.max):Qe(ae,ae),le=Ue.delayedCall(O.delay||a/2||.1,function(){var e,t,r,n,o,i,s,a;Math.abs(A.getVelocity())<10&&!rt?(t=((e=v&&!k?v.totalProgress():A.progress)-ie)/(ut()-et)*1e3||0,r=dt(t/2)*t/.185,o=Qe(0,1,c(n=e+r,A)),i=A.scroll(),s=Math.round(W+o*Y),a=B.tween,i<=D&&W<=i&&s!==i&&(a&&!a._initted&&a.data<=Math.abs(s-i)||B(s,{duration:ae(dt(.185*Math.max(dt(n-e),dt(o-e))/t/.05||0)),ease:O.ease||"power3",data:Math.abs(s-i),onComplete:function(){oe=ie=v&&!k?v.totalProgress():A.progress,l&&l(A)}},i,r*Y,s-i-r*Y))):A.isActive&&le.restart(!0)}).pause()),n&&(_t[n]=A),y=A.trigger=Ke(y||b)[0],b=!0===b?y:Ke(b)[0],Se(f)&&(f={targets:y,className:f}),b&&(!1===w||w===wt||(w=!(!w&&"flex"===ze(b.parentNode).display)&&bt),A.pin=b,!1!==g.force3D&&Ue.set(b,{force3D:!0}),(i=Ue.core.getCache(b)).spacer?V=i.pinState:(i.spacer=$=$e.createElement("div"),$.setAttribute("class","pin-spacer"+(n?" pin-spacer-"+n:"")),i.pinState=V=je(b)),A.spacer=$=i.spacer,s=ze(b),ee=s[w+m.os2],G=Ue.getProperty(b),J=Ue.quickSetter(b,m.a,Ot),qe(b,$,s),Z=je(b)),be&&(s=_e(be)?Ae(be,St):St,j=Fe("scroller-start",n,M,m,s,0),X=Fe("scroller-end",n,M,m,s,0,j),be=j["offset"+m.op.d2],H=Fe("start",n,M,m,s,be),q=Fe("end",n,M,m,s,be),E||((be=S?Je:M).style.position="absolute"===ze(be).position?"absolute":"relative",Ue.set([j,X],{force3D:!0}),re=Ue.quickSetter(j,m.a,Ot),ne=Ue.quickSetter(X,m.a,Ot))),A.revert=function(e){var t,r=!1!==e||!A.enabled,n=tt;r!==I&&(r&&(ue=Math.max(A.scroll(),A.scroll.rec||0),ce=A.progress,fe=v&&v.progress()),H&&[H,q,j,X].forEach(function(e){return e.style.display=r?"none":"block"}),r&&(tt=1),A.update(r),tt=n,b&&(r?(t=b,e=$,At(n=V),t.parentNode!==e||(n=e.parentNode)&&(n.insertBefore(t,e),n.removeChild(e))):T&&A.isActive||qe(b,$,ze(b),te)),I=r)},A.refresh=function(e){if(!tt&&A.enabled)if(b&&e&&ft)Be(Rt,"scrollEnd",He);else{tt=1,se&&se.pause(),C&&v&&v.progress(0).invalidate(),I||A.revert();for(var t,r,n,o,i,s=L(),a=R(),l=Me(M,m),c=0,u=0,f=g.end,p=g.endTrigger||y,e=g.start||(0!==g.start&&y?b?"0 0":"0 100%":0),d=y&&Math.max(0,Pt.indexOf(A))||0,h=d;h--;)!(o=Pt[h].pin)||o!==y&&o!==b||Pt[h].revert();for(W=Xe(e,y,s,m,A.scroll(),H,j,A,a,z,E,l)||(b?-.001:0),Ee(f)&&(f=f(A)),Se(f)&&!f.indexOf("+=")&&(~f.indexOf(" ")?f=(Se(e)?e.split(" ")[0]:"")+f:(c=Ne(f.substr(2),s),f=Se(e)?e:W+c,p=y)),D=Math.max(W,Xe(f||(p?"100% 0":l),p,s,m,A.scroll()+c,q,X,A,a,z,E,l))||-.001,Y=D-W||(W-=.01)&&.001,c=0,h=d;h--;)(o=(n=Pt[h]).pin)&&n.start-n._pinPush<W&&(t=n.end-n.start,o===y&&(c+=t),o===b&&(u+=t));if(W+=c,D+=c,A._pinPush=u,H&&c&&((t={})[m.a]="+="+c,Ue.set([H,q],t)),b)t=ze(b),s=m===kt,a=A.scroll(),K=parseFloat(G(m.a))+u,!l&&1<D&&((S?Je:M).style["overflow-"+m.a]="scroll"),qe(b,$,t),Z=je(b),r=Mt(b,!0),l=E&&Te(M,s?Tt:kt)(),w&&((te=[w+m.os2,Y+u+Ot]).t=$,(h=w===bt?Le(b,m)+Y+u:0)&&te.push(m.d,h+Ot),At(te),E&&A.scroll(ue)),E&&((i={top:r.top+(s?a-W:l)+Ot,left:r.left+(s?l:a-W)+Ot,boxSizing:"border-box",position:"fixed"})[ht]=i.maxWidth=Math.ceil(r.width)+Ot,i[gt]=i.maxHeight=Math.ceil(r.height)+Ot,i[wt]=i[wt+xt]=i[wt+vt]=i[wt+yt]=i[wt+mt]="0",i[bt]=t[bt],i[bt+xt]=t[bt+xt],i[bt+vt]=t[bt+vt],i[bt+yt]=t[bt+yt],i[bt+mt]=t[bt+mt],U=function(e,t,r){for(var n,o=[],i=e.length,s=r?8:0;s<i;s+=2)n=e[s],o.push(n,n in t?t[n]:e[s+1]);return o.t=e.t,o}(V,i,T)),v?(i=v._initted,it(1),v.progress(1,!0),Q=G(m.a)-K+Y+u,Y!==Q&&U.splice(U.length-2,2),v.progress(0,!0),i||v.invalidate(),it(0)):Q=Y;else if(y&&A.scroll())for(r=y.parentNode;r&&r!==Je;)r._pinOffset&&(W-=r._pinOffset,D-=r._pinOffset),r=r.parentNode;for(h=0;h<d;h++)!(n=Pt[h].pin)||n!==y&&n!==b||Pt[h].revert(!1);A.start=W,A.end=D,(N=F=A.scroll())<ue&&A.scroll(ue),A.revert(!1),tt=0,v&&k&&v._initted&&v.progress(fe,!0).render(v.time(),!0,!0),ce!==A.progress&&(se&&v.totalProgress(ce,!0),A.progress=ce,A.update()),b&&w&&($._pinOffset=Math.round(A.progress*Q)),x&&x(A)}},A.getVelocity=function(){return(A.scroll()-F)/(ut()-et)*1e3||0},A.update=function(e,t){var r,n,o,i,s=A.scroll(),a=e?0:(s-W)/Y,l=a<0?0:1<a?1:a||0,c=A.progress;t&&(F=N,N=s,O&&(ie=oe,oe=v&&!k?v.totalProgress():l)),(l=d&&!l&&b&&!tt&&!lt&&ft&&W<s+(s-F)/(ut()-et)*d?1e-4:l)!==c&&A.enabled&&(i=(o=(n=A.isActive=!!l&&l<1)!=(!!c&&c<1))||!!l!=!!c,A.direction=c<l?1:-1,A.progress=l,k||(!se||tt||lt?v&&v.totalProgress(l,!!tt):(se.vars.totalProgress=l,se.invalidate().restart())),b&&(e&&w&&($.style[w+m.os2]=ee),E?i&&(r=!e&&c<l&&s<D+1&&s+1>=Me(M,m),T&&(e||!n&&!r?Ye(b,$):(a=Mt(b,!0),t=s-W,Ye(b,Je,a.top+(m===kt?t:0)+Ot,a.left+(m===kt?0:t)+Ot))),At(n||r?U:Z),Q!==Y&&l<1&&n||J(K+(1!==l||r?0:Q))):J(K+Q*l)),!O||B.tween||tt||lt||le.restart(!0),f&&(o||h&&l&&(l<1||!st))&&Ke(f.targets).forEach(function(e){return e.classList[n||h?"add":"remove"](f.className)}),!u||k||e||u(A),i&&!tt?(c=l&&!c?0:1===l?1:1===c?2:3,k&&(r=!o&&"none"!==_[c+1]&&_[c+1]||_[c],v&&("complete"===r||"reset"===r||r in v)&&("complete"===r?v.pause().totalProgress(1):"reset"===r?v.restart(!0).pause():v[r]()),u&&u(A)),!o&&st||(p&&o&&p(A),P[c]&&P[c](A),h&&(1===l?A.kill(!1,1):P[c]=0),o||P[c=1===l?1:3]&&P[c](A))):k&&u&&!tt&&u(A)),ne&&(re(s+(j._isFlipped?1:0)),ne(s))},A.enable=function(){A.enabled||(A.enabled=!0,Be(M,"resize",De),Be(M,"scroll",We),o&&Be(Rt,"refreshInit",o),v&&v.add?Ue.delayedCall(.01,function(){return W||D||A.refresh()})&&(Y=.01)&&(W=D=0):A.refresh())},A.disable=function(e,t){if(A.enabled&&(!1!==e&&A.revert(),A.enabled=A.isActive=!1,t||se&&se.pause(),ue=0,i&&(i.uncache=1),o&&Ie(Rt,"refreshInit",o),le&&(le.pause(),B.tween&&B.tween.kill()&&(B.tween=0)),!S)){for(var r=Pt.length;r--;)if(Pt[r].scroller===M&&Pt[r]!==A)return;Ie(M,"resize",De),Ie(M,"scroll",We)}},A.kill=function(e,t){A.disable(e,t),n&&delete _t[n];var r=Pt.indexOf(A);Pt.splice(r,1),r===nt&&0<zt&&nt--,v&&(v.scrollTrigger=null,e&&v.render(-1),t||v.kill()),H&&[H,q,j,X].forEach(function(e){return e.parentNode.removeChild(e)}),b&&(i&&(i.uncache=1),r=0,Pt.forEach(function(e){return e.pin===b&&r++}),r||(i.spacer=0))},A.enable()):this.update=this.refresh=this.kill=we},Rt.register=function(e){var t,r;return f||(Ue=e||o(),n()&&window.document&&(Ze=window,$e=document,Ge=$e.documentElement,Je=$e.body),Ue&&(Ke=Ue.utils.toArray,Qe=Ue.utils.clamp,it=Ue.core.suppressOverwrites||we,Ue.core.globals("ScrollTrigger",Rt),Je&&(h=Ze.requestAnimationFrame||function(e){return setTimeout(e,16)},Be(Ze,"mousewheel",We),p=[Ze,$e,Ge,Je],Be($e,"scroll",We),r=(t=Je.style).borderTop,t.borderTop="1px solid #000",e=Mt(Je),kt.m=Math.round(e.top+kt.sc())||0,Tt.m=Math.round(e.left+Tt.sc())||0,r?t.borderTop=r:t.removeProperty("border-top"),v=setInterval(c,200),Ue.delayedCall(.5,function(){return lt=0}),Be($e,"touchcancel",we),Be(Je,"touchstart",we),l(Be,$e,"pointerdown,touchstart,mousedown",function(){return rt=1}),l(Be,$e,"pointerup,touchend,mouseup",function(){return rt=0}),m=Ue.utils.checkPrefix("transform"),q.push(m),f=ut(),d=Ue.delayedCall(.2,F).pause(),b=[$e,"visibilitychange",function(){var e=Ze.innerWidth,t=Ze.innerHeight;$e.hidden?(x=e,y=t):x===e&&y===t||De()},$e,"DOMContentLoaded",F,Ze,"load",function(){return ft||F()},Ze,"resize",De],i(Be)))),f},Rt.defaults=function(e){for(var t in e)Et[t]=e[t]},Rt.kill=function(){pt=0,Pt.slice(0).forEach(function(e){return e.kill(1)})},Rt.config=function(e){"limitCallbacks"in e&&(st=!!e.limitCallbacks);var t=e.syncInterval;t&&clearInterval(v)||(v=t)&&setInterval(c,t),"autoRefreshEvents"in e&&(i(Ie),i(Be,e.autoRefreshEvents||"none"),r=-1===(e.autoRefreshEvents+"").indexOf("resize"))},Rt.scrollerProxy=function(e,t){var r=Ke(e)[0],n=C.indexOf(r),e=Ce(r);~n&&C.splice(n,e?6:2),e?ct.unshift(Ze,t,Je,t,Ge,t):ct.unshift(r,t)},Rt.matchMedia=function(e){var t,r,n,o,i;for(r in e)n=L.indexOf(r),o=e[r],"all"===(at=r)?o():(t=Ze.matchMedia(r))&&(t.matches&&(i=o()),~n?(L[n+1]=a(L[n+1],o),L[n+2]=a(L[n+2],i)):(n=L.length,L.push(r,o,i),t.addListener?t.addListener(u):t.addEventListener("change",u)),L[n+3]=t.matches),at=0;return L},Rt.clearMatchMedia=function(e){e||(L.length=0),0<=(e=L.indexOf(e))&&L.splice(e,4)},Rt);function Rt(e,t){f||Rt.register(Ue)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(e,t)}Y.version="3.6.0",Y.saveStyles=function(e){return e?Ke(e).forEach(function(e){var t;e&&e.style&&(0<=(t=B.indexOf(e))&&B.splice(t,4),B.push(e,e.style.cssText,Ue.core.getCache(e),at))}):B},Y.revert=function(e,t){return N(!e,t)},Y.create=function(e,t){return new Y(e,t)},Y.refresh=function(e){return e?De():F(!0)},Y.update=D,Y.maxScroll=function(e,t){return Me(e,t?Tt:kt)},Y.getScrollFunc=function(e,t){return Te(Ke(e)[0],t?Tt:kt)},Y.getById=function(e){return _t[e]},Y.getAll=function(){return Pt.slice(0)},Y.isScrolling=function(){return!!ft},Y.addEventListener=function(e,t){e=z[e]||(z[e]=[]);~e.indexOf(t)||e.push(t)},Y.removeEventListener=function(e,t){e=z[e],t=e&&e.indexOf(t);0<=t&&e.splice(t,1)},Y.batch=function(e,t){var r,n=[],o={},i=t.interval||.016,s=t.batchMax||1e9;for(r in t)o[r]="on"===r.substr(0,2)&&Ee(t[r])&&"onRefreshInit"!==r?function(e){var t=[],r=[],n=Ue.delayedCall(i,function(){e(t,r),t=[],r=[]}).pause();return function(e){t.length||n.restart(!0),t.push(e.trigger),r.push(e),s<=t.length&&n.progress(1)}}(t[r]):t[r];return Ee(s)&&(s=s(),Be(Y,"refresh",function(){return s=t.batchMax()})),Ke(e).forEach(function(e){var t={};for(r in o)t[r]=o[r];t.trigger=e,n.push(Y.create(t))}),n},Y.sort=function(e){return Pt.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},o()&&Ue.registerPlugin(Y),e.ScrollTrigger=Y,e.default=Y,Object.defineProperty(e,"__esModule",{value:!0})});
"use strict";
"use strict";gsap.effects.explode(".logo",{direction:"left",duration:3});
"use strict";window.addEventListener("scroll",()=>{let e=document.body.scrollTop||document.documentElement.scrollTop,t=document.documentElement.scrollHeight-document.documentElement.clientHeight,o=e/t*100,l=document.querySelector(".progress-bar");l.style.width=o+"%",console.log(o)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
