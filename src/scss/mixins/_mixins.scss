//Fontface mixin
@mixin font-face($font-family, $url, $weight) {
    @font-face {
        font-family: "#{$font-family}";
        src: url("../fonts/#{$url}.woff") format("woff"),
        url("../fonts/#{$url}.woff2") format("woff2");
        font-weight: #{$weight};
        font-display: swap;
        font-style: normal;
    }
}

//Media query
@mixin for-size($size) {
    @if $size==phone-only {
        @media (max-width: 599px) {
            @content;
        }
    }
    @else if $size==tablet-portrait-up {
        @media (min-width: 600px) {
            @content;
        }
    }
    @else if $size==tablet-landscape-up {
        @media (min-width: 900px) {
            @content;
        }
    }
    @else if $size==desktop-up {
        @media (min-width: 1200px) {
            @content;
        }
    }
    @else if $size==big-desktop-up {
        @media (min-width: 1800px) {
            @content;
        }
    }
}

//CSS variables:
//1) HSL
//2) Alpha
@function alpha($color,
$opacity) {
    $color: str-replace($color, 'var(');
    $color: str-replace($color, ')');
    $color-h: var(#{$color+'-h'});
    $color-s: var(#{$color+'-s'});
    $color-l: var(#{$color+'-l'});
    @return hsla($color-h,
    $color-s,
    $color-l,
    $opacity);
}

@mixin defineColorHSL($color,
$hue,
$saturation,
$lightness) {
    #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
    #{$color}-h: #{$hue};
    #{$color}-s: #{$saturation};
    #{$color}-l: #{$lightness};
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string,
$search,
$replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string,
        1,
        $index - 1)+$replace+str-replace(str-slice($string,
        $index+str-length($search)),
        $search,
        $replace);
    }
    @return $string;
}

//typography
@mixin font ($font-family,
$weight,
$font-size,
$color,
$line-height) {
    font-family: $font-family;
    font-weight: $weight;
    font-size: $font-size;
    color: $color;
    line-height: $line-height;
}

@mixin font-stroke ($text-stroke,
$fill-color,
$weight) {
    @supports (-webkit-text-stroke: $weight $text-stroke) {
        -webkit-text-stroke: $weight $text-stroke;
        -webkit-text-fill-color: $fill-color;
    }
}

//Shadow
@mixin shadow-xs($color) {
    box-shadow: 0 0.1px 0.9px $color, 0 0.4px 3.1px $color, 0 2px 14px $color;
}

@mixin shadow-s($color) {
    box-shadow: 0px 3px 12px -1px $color, 0px 2px 4px -1px $color;
}

@mixin shadow-m($color) {
    box-shadow: 0px 8px 24px -4px $color, 0px 2px 6px -1px $color;
}

@mixin shadow-l($color) {
    box-shadow: 0px 12px 48px -6px $color, 0px 3px 18px -2px $color;
}

@mixin shadow-xl($color) {
    box-shadow: 0 2.8px 2.2px $color, 0 6.7px 5.3px $color, 0 12.5px 10px $color, 0 22.3px 17.9px $color, 0 41.8px 33.4px $color, 0 100px 80px $color;
}